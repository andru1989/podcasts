{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport ChannelGrid from '../components/ChannelGrid';\nimport Layout from '../components/Layout';\nimport PodcastsListWithClick from '../components/PodcastsListWihClick';\nimport Error from './_error';\n\nvar _default =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"openPodcast\", function (event, podcast) {\n      event.preventDefault();\n\n      _this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    _this.state = {\n      openPodcast: null\n    };\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series,\n          statusCode = _this$props.statusCode;\n      var openPodcast = this.state.openPodcast;\n\n      if (statusCode !== 200) {\n        return React.createElement(Error, {\n          statusCode: statusCode\n        });\n      }\n\n      return React.createElement(Layout, {\n        title: channel.title\n      }, React.createElement(\"div\", {\n        className: \"banner\",\n        style: {\n          backgroundImage: \"url(\".concat(channel.urls.banner_image.original, \")\")\n        }\n      }), openPodcast && React.createElement(\"div\", null, \"Hay un podcast abierto\"), React.createElement(\"h1\", null, channel.title), series.length > 0 && React.createElement(\"div\", null, React.createElement(\"h2\", null, \"Series\"), React.createElement(ChannelGrid, {\n        channels: series\n      })), React.createElement(PodcastsListWithClick, {\n        audioClips: audioClips,\n        onClickPodcast: this.openPodcast\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, res, idChannel, _ref2, _ref3, reqChannel, reqClips, reqSeries, dataChannel, channel, dataClips, audioClips, dataSeries, series;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query, res = _ref.res;\n                idChannel = query.id;\n                _context.prev = 2;\n                _context.next = 5;\n                return _Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\"))]);\n\n              case 5:\n                _ref2 = _context.sent;\n                _ref3 = _slicedToArray(_ref2, 3);\n                reqChannel = _ref3[0];\n                reqClips = _ref3[1];\n                reqSeries = _ref3[2];\n\n                if (!(reqChannel.status >= 400)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                res.statusCode = reqChannel.status;\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  series: null,\n                  statusCode: 404\n                });\n\n              case 13:\n                _context.next = 15;\n                return reqChannel.json();\n\n              case 15:\n                dataChannel = _context.sent;\n                channel = dataChannel.body.channel;\n                _context.next = 19;\n                return reqClips.json();\n\n              case 19:\n                dataClips = _context.sent;\n                audioClips = dataClips.body.audio_clips;\n                _context.next = 23;\n                return reqSeries.json();\n\n              case 23:\n                dataSeries = _context.sent;\n                series = dataSeries.body.channels;\n                return _context.abrupt(\"return\", {\n                  channel: channel,\n                  audioClips: audioClips,\n                  series: series,\n                  statusCode: 200\n                });\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](2);\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  series: null,\n                  statusCode: 503\n                });\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 28]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/andru1989/MEGA/Labs/react/podcasts/pages/channel.js"],"names":["ChannelGrid","Layout","PodcastsListWithClick","Error","props","event","podcast","preventDefault","setState","openPodcast","state","channel","audioClips","series","statusCode","title","backgroundImage","urls","banner_image","original","length","query","res","idChannel","id","all","fetch","reqChannel","reqClips","reqSeries","status","json","dataChannel","body","dataClips","audio_clips","dataSeries","channels","React","Component"],"mappings":"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","sourcesContent":["import ChannelGrid from '../components/ChannelGrid';\nimport Layout from '../components/Layout';\nimport PodcastsListWithClick from '../components/PodcastsListWihClick';\nimport Error from './_error';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openPodcast: null\n    }\n  }\n\n  static async getInitialProps({ query, res }) {\n    let idChannel = query.id\n\n    try {\n      let [reqChannel, reqClips, reqSeries] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n      ])\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status\n        return { channel: null, audioClips: null, series: null, statusCode: 404 }\n      }\n\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel\n\n      let dataClips = await reqClips.json()\n      let audioClips = dataClips.body.audio_clips\n\n      let dataSeries = await reqSeries.json()\n      let series = dataSeries.body.channels\n\n      return { channel, audioClips, series, statusCode: 200 }\n    } catch(e) {\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault()\n    this.setState({\n      openPodcast: podcast\n    })\n  }\n\n  render() {\n    const { channel, audioClips, series, statusCode } = this.props\n    const { openPodcast } = this.state\n\n    if (statusCode !== 200) {\n      return <Error statusCode={statusCode} />\n    }\n\n    return (\n      <Layout title={channel.title}>\n        <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n\n        { openPodcast && <div>Hay un podcast abierto</div> }\n\n        <h1>{channel.title}</h1>\n\n        {series.length > 0 &&\n          <div>\n            <h2>Series</h2>\n            <ChannelGrid channels={series} />\n          </div>\n        }\n\n        <PodcastsListWithClick audioClips={audioClips} onClickPodcast={this.openPodcast} />\n      </Layout>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}